{
    "name": "Chatbot AI Processor",
    "nodes": [
        {
            "parameters": {
                "httpMethod": "POST",
                "path": "chatbot-webhook",
                "responseMode": "responseNode",
                "options": {}
            },
            "id": "webhook-trigger",
            "name": "Webhook Trigger",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
                240,
                300
            ],
            "webhookId": "chatbot-webhook"
        },
        {
            "parameters": {
                "conditions": {
                    "options": {
                        "caseSensitive": true,
                        "leftValue": "",
                        "typeValidation": "strict"
                    },
                    "conditions": [
                        {
                            "id": "user-auth-check",
                            "leftValue": "={{ $json.body.session_variables['x-hasura-user-id'] }}",
                            "rightValue": "",
                            "operator": {
                                "type": "string",
                                "operation": "notEmpty"
                            }
                        },
                        {
                            "id": "chat-id-check",
                            "leftValue": "={{ $json.body.input.chatId }}",
                            "rightValue": "",
                            "operator": {
                                "type": "string",
                                "operation": "notEmpty"
                            }
                        },
                        {
                            "id": "message-check",
                            "leftValue": "={{ $json.body.input.message }}",
                            "rightValue": "",
                            "operator": {
                                "type": "string",
                                "operation": "notEmpty"
                            }
                        }
                    ],
                    "combinator": "and"
                }
            },
            "id": "validation-node",
            "name": "Validate Request",
            "type": "n8n-nodes-base.if",
            "typeVersion": 1,
            "position": [
                460,
                300
            ]
        },
        {
            "parameters": {
                "url": "https://pafxhkjbnmhuloonsthd.hasura.ap-south-1.nhost.run/v1/graphql",
                "authentication": "predefinedCredentialType",
                "nodeCredentialType": "graphqlApi",
                "sendQuery": true,
                "query": "query VerifyChatOwnership($chatId: uuid!, $userId: uuid!) {\n  chats_by_pk(id: $chatId) {\n    id\n    user_id\n    title\n    messages(order_by: {created_at: desc}, limit: 10) {\n      content\n      is_bot\n      created_at\n    }\n  }\n}",
                "variables": {
                    "chatId": "={{ $json.body.input.chatId }}",
                    "userId": "={{ $json.body.session_variables['x-hasura-user-id'] }}"
                }
            },
            "id": "verify-chat-ownership",
            "name": "Verify Chat Ownership",
            "type": "n8n-nodes-base.graphql",
            "typeVersion": 1,
            "position": [
                680,
                200
            ]
        },
        {
            "parameters": {
                "conditions": {
                    "options": {
                        "caseSensitive": true,
                        "leftValue": "",
                        "typeValidation": "strict"
                    },
                    "conditions": [
                        {
                            "id": "chat-exists",
                            "leftValue": "={{ $json.chats_by_pk }}",
                            "rightValue": "",
                            "operator": {
                                "type": "object",
                                "operation": "notEmpty"
                            }
                        },
                        {
                            "id": "user-owns-chat",
                            "leftValue": "={{ $json.chats_by_pk.user_id }}",
                            "rightValue": "={{ $('Webhook Trigger').item.json.body.session_variables['x-hasura-user-id'] }}",
                            "operator": {
                                "type": "string",
                                "operation": "equals"
                            }
                        }
                    ],
                    "combinator": "and"
                }
            },
            "id": "check-ownership",
            "name": "Check Ownership",
            "type": "n8n-nodes-base.if",
            "typeVersion": 1,
            "position": [
                900,
                200
            ]
        },
        {
            "parameters": {
                "url": "https://openrouter.ai/api/v1/chat/completions",
                "authentication": "predefinedCredentialType",
                "nodeCredentialType": "httpHeaderAuth",
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "Content-Type",
                            "value": "application/json"
                        }
                    ]
                },
                "sendBody": true,
                "bodyParameters": {
                    "parameters": [
                        {
                            "name": "model",
                            "value": "openai/gpt-4o-mini"
                        },
                        {
                            "name": "messages",
                            "value": "={{ $json.messages }}"
                        },
                        {
                            "name": "max_tokens",
                            "value": 500
                        },
                        {
                            "name": "temperature",
                            "value": 0.7
                        }
                    ]
                },
                "options": {}
            },
            "id": "openrouter-api",
            "name": "OpenRouter API",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [
                1120,
                100
            ]
        },
        {
            "parameters": {
                "jsCode": "// Build conversation context from chat history\nconst chatData = $input.first().json.chats_by_pk;\nconst userMessage = $('Webhook Trigger').item.json.body.input.message;\n\n// Build messages array for OpenRouter API\nconst messages = [\n  {\n    role: 'system',\n    content: 'You are a helpful AI assistant. Provide concise, helpful responses to user questions. Keep responses under 200 words unless more detail is specifically requested.'\n  }\n];\n\n// Add recent chat history for context (last 10 messages)\nif (chatData.messages && chatData.messages.length > 0) {\n  chatData.messages.reverse().forEach(msg => {\n    messages.push({\n      role: msg.is_bot ? 'assistant' : 'user',\n      content: msg.content\n    });\n  });\n}\n\n// Add current user message\nmessages.push({\n  role: 'user',\n  content: userMessage\n});\n\nreturn {\n  messages: messages,\n  chatId: $('Webhook Trigger').item.json.body.input.chatId,\n  userId: $('Webhook Trigger').item.json.body.session_variables['x-hasura-user-id'],\n  userMessage: userMessage\n};"
            },
            "id": "prepare-ai-request",
            "name": "Prepare AI Request",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                1120,
                200
            ]
        },
        {
            "parameters": {
                "url": "https://pafxhkjbnmhuloonsthd.hasura.ap-south-1.nhost.run/v1/graphql",
                "authentication": "predefinedCredentialType",
                "nodeCredentialType": "graphqlApi",
                "sendQuery": true,
                "query": "mutation SaveBotMessage($chatId: uuid!, $content: String!) {\n  insert_messages_one(\n    object: {\n      chat_id: $chatId\n      content: $content\n      is_bot: true\n    }\n  ) {\n    id\n    content\n    is_bot\n    created_at\n    chat_id\n  }\n  \n  update_chats_by_pk(\n    pk_columns: { id: $chatId }\n    _set: { updated_at: \"now()\" }\n  ) {\n    id\n    updated_at\n  }\n}",
                "variables": {
                    "chatId": "={{ $('Prepare AI Request').item.json.chatId }}",
                    "content": "={{ $json.choices[0].message.content }}"
                }
            },
            "id": "save-bot-response",
            "name": "Save Bot Response",
            "type": "n8n-nodes-base.graphql",
            "typeVersion": 1,
            "position": [
                1340,
                100
            ]
        },
        {
            "parameters": {
                "respondWith": "json",
                "responseBody": "={{ {\n  \"success\": true,\n  \"message\": $json.insert_messages_one\n} }}"
            },
            "id": "success-response",
            "name": "Success Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
                1560,
                100
            ]
        },
        {
            "parameters": {
                "respondWith": "json",
                "responseBody": "={{ {\n  \"success\": false,\n  \"error\": \"Unauthorized: Invalid request or insufficient permissions\"\n} }}",
                "options": {
                    "responseCode": 401
                }
            },
            "id": "unauthorized-response",
            "name": "Unauthorized Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
                680,
                400
            ]
        },
        {
            "parameters": {
                "respondWith": "json",
                "responseBody": "={{ {\n  \"success\": false,\n  \"error\": \"Chat not found or access denied\"\n} }}",
                "options": {
                    "responseCode": 403
                }
            },
            "id": "forbidden-response",
            "name": "Forbidden Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
                900,
                400
            ]
        },
        {
            "parameters": {
                "respondWith": "json",
                "responseBody": "={{ {\n  \"success\": false,\n  \"error\": \"AI service error: \" + ($json.error?.message || \"Unknown error\")\n} }}",
                "options": {
                    "responseCode": 500
                }
            },
            "id": "error-response",
            "name": "Error Response",
            "type": "n8n-nodes-base.respondToWebhook",
            "typeVersion": 1,
            "position": [
                1340,
                300
            ]
        }
    ],
    "connections": {
        "Webhook Trigger": {
            "main": [
                [
                    {
                        "node": "Validate Request",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Validate Request": {
            "main": [
                [
                    {
                        "node": "Verify Chat Ownership",
                        "type": "main",
                        "index": 0
                    }
                ],
                [
                    {
                        "node": "Unauthorized Response",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Verify Chat Ownership": {
            "main": [
                [
                    {
                        "node": "Check Ownership",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Check Ownership": {
            "main": [
                [
                    {
                        "node": "Prepare AI Request",
                        "type": "main",
                        "index": 0
                    }
                ],
                [
                    {
                        "node": "Forbidden Response",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Prepare AI Request": {
            "main": [
                [
                    {
                        "node": "OpenRouter API",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "OpenRouter API": {
            "main": [
                [
                    {
                        "node": "Save Bot Response",
                        "type": "main",
                        "index": 0
                    }
                ],
                [
                    {
                        "node": "Error Response",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Save Bot Response": {
            "main": [
                [
                    {
                        "node": "Success Response",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "pinData": {},
    "settings": {
        "executionOrder": "v1"
    },
    "staticData": null,
    "tags": [],
    "triggerCount": 1,
    "updatedAt": "2024-01-01T00:00:00.000Z",
    "versionId": "1"
}